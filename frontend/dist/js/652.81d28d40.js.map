{"version":3,"file":"js/652.81d28d40.js","mappings":"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","sources":["webpack://webserver/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://webserver/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://webserver/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://webserver/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://webserver/./src/api/protocol.js"],"sourcesContent":["export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nexport default function toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","\r\n// function MessageDiscriminator(input){\r\n//     switch (input){\r\n//         case 0:\r\n//             return \"control\";\r\n//         case 1:\r\n//             return \"data\";\r\n//         default:\r\n//             return \"unknown\"; \r\n//     }\r\n// }\r\n\r\nconst MessageDiscriminator = {\r\n    ControlMessage: 0,\r\n    DataMessage: 1,\r\n    AckMessage: 2,\r\n    ErrMessage: 3,\r\n}\r\n\r\nconst ControlMessage = {\r\n    UserNameRequest: 1,\r\n    UserNameResponse: 2,\r\n    Connect: 3,\r\n    Disconnect: 4,\r\n    Registration: 5,\r\n    UserUpdate: 6,\r\n    UserInfoRequest: 7,\r\n    UserInfoResponse: 8,\r\n    UserInfoUpdate: 9,\r\n    UsersList: 10,\r\n    MessagesRequest: 11,\r\n    NumberOfMessages: 12,\r\n}\r\n\r\nlet ControlMessageType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case ControlMessage.UserNameRequest:\r\n                return \"user name request\";\r\n            case ControlMessage.UserNameResponse:\r\n                return \"user name response\";    \r\n            case ControlMessage.Connect:\r\n                return \"connect\";\r\n            case ControlMessage.Disconnect:\r\n                return \"disconnect\";\r\n            case ControlMessage.Registration:\r\n                return \"registration\";\r\n            case ControlMessage.UserUpdate:\r\n                return \"user update\";\r\n            case ControlMessage.UserInfoRequest:\r\n                return \"user info request\";\r\n            case ControlMessage.UserInfoResponse:\r\n                return \"user info response\"\r\n            case ControlMessage.UserInfoUpdate:\r\n                return \"user info update\"\r\n            case ControlMessage.UsersList:\r\n                return \"users list\";   \r\n            case ControlMessage.MessagesRequest:\r\n                return \"message request\"\r\n            case ControlMessage.NumberOfMessages:\r\n                return \"number of messages\"\r\n            default: return \"unknown command\";        \r\n        }\r\n    }\r\n}\r\n\r\nlet UserInfo ={\r\n    Name: \"\",\r\n    Surname: \"\",\r\n    Familyname: \"\",\r\n    Birthdate:\"\",\r\n    decode(raw){\r\n        let len = raw.length;\r\n        let offset = 0;\r\n        let str = new StringValue();\r\n        while (len > offset){\r\n            let data = raw.subarray(offset)\r\n            offset += 1\r\n            switch (data[0]&0b0111_1111){\r\n                case IEI.Name:\r\n                    offset = offset + str.decode(raw.subarray(offset));\r\n                    this.Name = str.value;\r\n                    break;\r\n                case IEI.Surname:\r\n                    offset = offset + str.decode(raw.subarray(offset));\r\n                    this.Surname = str.value;\r\n                    break;\r\n                case IEI.Familyname:\r\n                    offset = offset + str.decode(raw.subarray(offset));\r\n                    this.Familyname = str.value;\r\n                    break;\r\n                case IEI.Birthdate:\r\n                    this.Birthdate = birthdateDecode(raw.subarray(offset))\r\n                    offset += 4;\r\n                    break;     \r\n                default:\r\n                    offset = len;\r\n                    break;         \r\n            }\r\n        }\r\n    },\r\n    code(){\r\n        let name = [], surmame = [], familyname = [], birthdate = [], res = [];\r\n        let str = new StringValue();\r\n        if (this.Name != ''){\r\n            str.value = this.Name;\r\n            name = str.code();\r\n            name.unshift(IEI.Name);\r\n        }\r\n        if (this.Surname !=''){\r\n            str.value = this.Surname;\r\n            surmame = str.code();\r\n            surmame.unshift(IEI.Surname);\r\n        }\r\n        if (this.Familyname != ''){\r\n            str.value = this.Familyname;\r\n            familyname = str.code();\r\n            familyname.unshift(IEI.Familyname);\r\n        }\r\n        if (this.Birthdate != ''){\r\n            birthdate = birthdateCode(this.Birthdate);\r\n        }\r\n        return res.concat(name, surmame, familyname, birthdate)\r\n    },\r\n    clear(){\r\n        this.Name = \"\";\r\n        this.Surname = \"\";\r\n        this.Familyname = \"\";\r\n        this.Birthdate = \"\";\r\n    }\r\n}\r\n\r\nlet birthdateDecode = function(raw){\r\n    if (raw.length < 4){\r\n        return;\r\n    }\r\n    let day = raw[0];\r\n    let mounth = raw[1];\r\n    let year = new Uint8Array([raw[2], raw[3]]);\r\n    let yearView = new DataView(year.buffer);\r\n    return String(yearView.getUint16()) + '-' + String(mounth) + '-' + String(day); // '2017-06-21'\r\n}\r\n\r\nlet birthdateCode = function(birthdate){\r\n    let val = Date.parse(birthdate);\r\n    let date = new Date(val);\r\n    let res = [IEI.Birthdate];\r\n    res.push(date.getDate());\r\n    res.push((date.getMonth()+1));\r\n    res.push(Math.floor(date.getFullYear()/256));\r\n    res.push((date.getFullYear()%256));\r\n    return res\r\n}\r\n\r\n\r\nlet UsersList ={\r\n    ListCommand: \"\",\r\n    NumberOfItems: 0,\r\n    ListElements: new Map(),\r\n    decode(raw){\r\n        let offset = 0;\r\n        let data = raw;\r\n        this.ListCommand = listCommandTypeToString(data[0]);\r\n        offset +=1;\r\n        data = raw.subarray(offset);\r\n        if ((data[0]&0b0111_1111) == IEI.NumberOfItems){\r\n            let num = new TitleNumericValue(0);\r\n            offset = offset + num.decode(data);\r\n            this.NumberOfItems = num.value;\r\n            data = raw.subarray(offset); \r\n        }\r\n        if ((data[0]&0b0111_1111) != IEI.ListElements){\r\n            return \"list elements decode error\"\r\n        }\r\n        offset += 1;\r\n        data = raw.subarray(offset); \r\n        let num = new NumericValue();\r\n        let name = new StringValue();\r\n        let online = false;\r\n        let nrMessages = 0, id = 0;\r\n        while (raw.length > offset){\r\n            offset = offset + num.decode(data);\r\n            id = num.value;\r\n            data = raw.subarray(offset);\r\n            offset = offset + name.decode(data);\r\n            data = raw.subarray(offset);\r\n            online = data[0]>>4 == 0x0f;\r\n            offset += 1;\r\n            if (data[0]&0b0000_1111 == 0x0f){\r\n                offset = offset + num.decode(data.subarray(1));\r\n                nrMessages = num.value;\r\n            } else {\r\n                nrMessages = 0;\r\n            }\r\n            data = raw.subarray(offset); \r\n            this.ListElements.set(id, {online: online, name: name.value, nrm: nrMessages});\r\n        }\r\n    },\r\n    clear(){\r\n        this.ListCommand = \"\";\r\n        this.NumberOfItems = 0;\r\n        this.ListElements.clear();\r\n    }  \r\n}\r\n\r\nconst ListCommandType = {\r\n    setUserList: 1,\r\n    updateUserList: 2,\r\n    refreshUserList: 3,\r\n}\r\n\r\nfunction listCommandTypeToString(input){\r\n    switch (input){\r\n        case ListCommandType.setUserList:\r\n            return \"set list\";\r\n        case ListCommandType.updateUserList:\r\n            return \"update list\";\r\n        case ListCommandType.refreshUserList:\r\n            return \"refresh list\";\r\n        default:\r\n            return \"reserved\";            \r\n    }\r\n}\r\n\r\nlet MessagesRequest = {\r\n    RoomId: 0,\r\n    LastMessageNumber: 0,\r\n    decode(raw){\r\n        let data = raw, offset = 0;\r\n        let num = new NumericValue(0);\r\n        if (raw.length < 4){\r\n            console.error('message request decode error, raw length too short');\r\n            return 'message request decode error, raw length too short'\r\n        }\r\n        offset = num.decode(data);\r\n        if (offset == 0){\r\n            console.error('message request decode error');\r\n            return 'message request decode error'\r\n        }\r\n        this.RoomId = num.value\r\n        data = data.subarray(offset);\r\n        num.decode(data);\r\n        this.LastMessageNumber = num.value;\r\n    },\r\n    code(){\r\n        let arr = [];\r\n        let num = new NumericValue(this.RoomId);\r\n        let id = num.code();\r\n        num.value = this.LastMessageNumber;\r\n        let number = num.code();\r\n        return arr.concat(id, number)\r\n    },\r\n    clear(){\r\n        this.RoomId = 0;\r\n        this.LastMessageNumber = 0;\r\n    }\r\n}\r\n\r\nlet NumberOfMessages = {\r\n    RoomId: 0,\r\n    NumOfMessages: 0,\r\n    decode(raw){\r\n        let data = raw, offset = 0;\r\n        let num = new NumericValue(0);\r\n        if (raw.length < 2){\r\n            console.error('message request decode error, raw length too short');\r\n            return 'message request decode error, raw length too short'\r\n        }\r\n        offset = num.decode(data);\r\n        if (offset == 0){\r\n            console.error('message request decode error');\r\n            return 'message request decode error'\r\n        }\r\n        this.RoomId = num.value;\r\n        data = data.subarray(offset);\r\n        num.decode(data);\r\n        this.NumOfMessages = num.value;\r\n    },\r\n    code(){\r\n        let arr = [];\r\n        let num = new NumericValue(this.RoomId);\r\n        let id = num.code();        \r\n        num.value = this.LastMessageNumber;\r\n        let number = num.code();\r\n        return arr.concat(id, number)\r\n    },\r\n    clear(){\r\n        this.RoomId = 0;\r\n        this.NumOfMessages = 0;\r\n    }\r\n}\r\n\r\nlet ControlCommand = {\r\n    ControlMessageType,\r\n    UserId: 0,\r\n    UserName: \"\",\r\n    UserInfo,\r\n    UsersList,\r\n    MessagesRequest,\r\n    NumberOfMessages,\r\n}\r\n\r\nControlCommand.clear = function(){\r\n    this.ControlMessageType.value = 0;\r\n    this.UserId = 0;\r\n    this.UserName = \"\";\r\n    this.UserInfo.clear();\r\n    this.UsersList.clear();\r\n    this.MessagesRequest.clear();\r\n    this.NumberOfMessages.clear();\r\n}\r\n\r\nControlCommand.decode = function(raw){ \r\n    if (raw.length == 0){\r\n        console.error('Error control command decode')\r\n        return\r\n    }\r\n    ControlCommand.ControlMessageType.value = raw[0];\r\n    if (raw.length == 1){\r\n        return\r\n    }\r\n    let offset = 1;\r\n    let num = new NumericValue(0);\r\n    let text = new StringValue();\r\n    switch (raw[0]){\r\n        case ControlMessage.UserNameRequest:\r\n        case ControlMessage.UserInfoRequest:    \r\n            break;\r\n        case ControlMessage.UserNameResponse:\r\n            text.decode(raw.subarray(offset));\r\n            this.UserName = text.value;\r\n            break;\r\n        case ControlMessage.Connect:\r\n        case ControlMessage.Disconnect:    \r\n            num.decode(raw.subarray(offset));\r\n            this.UserId = num.value; \r\n            break;\r\n        case ControlMessage.Registration:    \r\n        case ControlMessage.UserUpdate:\r\n            offset = offset + num.decode(raw.subarray(offset));\r\n            this.UserId = num.value; \r\n            text.decode(raw.subarray(offset));\r\n            this.UserName = text.value;        \r\n            break;\r\n        case ControlMessage.UserInfoResponse:\r\n        case ControlMessage.UserInfoUpdate:    \r\n            this.UserInfo.decode(raw.subarray(offset));\r\n            break;\r\n        case ControlMessage.UsersList:\r\n            this.UsersList.decode(raw.subarray(offset));\r\n            break;\r\n        case ControlMessage.MessagesRequest:\r\n            this.MessagesRequest.decode(raw.subarray(offset));\r\n            break;\r\n        case ControlMessage.NumberOfMessages:\r\n            this.NumberOfMessages.decode(raw.subarray(offset));\r\n            break;                    \r\n    }\r\n}\r\n\r\nControlCommand.code = function(){\r\n    let arr = [MessageDiscriminator.ControlMessage];\r\n    arr.push(this.ControlMessageType.value);\r\n    let num = new NumericValue(this.UserId);\r\n    let text = new StringValue();\r\n    let data = [];\r\n    switch (this.ControlMessageType.value){\r\n        case ControlMessage.UserNameRequest:\r\n        case ControlMessage.UserInfoRequest:    \r\n            break;\r\n        case ControlMessage.UserNameResponse:\r\n            text.value = this.UserName;\r\n            data = text.code();\r\n            break;    \r\n        case ControlMessage.Connect:\r\n        case ControlMessage.Disconnect:    \r\n            data = num.code();\r\n            break;\r\n        case ControlMessage.Registration:    \r\n        case ControlMessage.UserUpdate:\r\n            data = num.code();    \r\n            text.value = this.UserName;\r\n            data = data.concat(text.code());\r\n            break;\r\n        case ControlMessage.UserInfoResponse:\r\n        case ControlMessage.UserInfoUpdate:\r\n            data = this.UserInfo.code();\r\n            break;\r\n        case ControlMessage.MessagesRequest:\r\n            data = this.MessagesRequest.code();\r\n            break;\r\n        case ControlMessage.NumberOfMessages:\r\n            data = this.NumberOfMessages.code();\r\n            break;        \r\n        default:\r\n            break;    \r\n    } \r\n    return new Uint8Array(arr.concat(data))\r\n}\r\n\r\n// Data Message\r\n\r\nconst DataType = {\r\n    NewMessage: 1,\r\n    OldMessage: 2,\r\n    UpdateMessage: 3,\r\n}\r\n\r\nlet DataMessageType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case DataType.NewMessage:\r\n                return 'new message';\r\n            case DataType.OldMessage:\r\n                return 'old message';\r\n            case DataType.UpdateMessage:\r\n                return 'update message';\r\n            default: return \"unknown command\"; \r\n        }\r\n    }\r\n}\r\n\r\nconst DataFormat = {\r\n    Text: 1,\r\n    Image: 2,\r\n    Audio: 3,\r\n}\r\n\r\nlet DataMessageFormat = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case DataFormat.Text:\r\n                return 'text';\r\n            case DataFormat.Image:\r\n                return 'image';\r\n            case DataFormat.Audio:\r\n                return 'audio';\r\n            default: return \"unknown format\"; \r\n        }\r\n    }\r\n}\r\n\r\nconst FragmentationType = {\r\n    First: 2,\r\n    Middle: 0,\r\n    Last: 1,\r\n}\r\n\r\nlet UserData = {\r\n    Fragmentation:{\r\n        On: false,\r\n        FragmentType: 0,\r\n        Counter: 0,\r\n    },\r\n    Data: Uint8Array,\r\n    decode(raw){\r\n        let data = new DataValue([]);\r\n        let offset = 1;\r\n        this.Fragmentation.On = (raw[0] >>> 7) == 1;\r\n        if (this.Fragmentation.On == true){\r\n            this.Fragmentation.FragmentType = raw[1] >>> 6;\r\n            this.Fragmentation.Counter = raw[1] & 0b0011_1111;\r\n            offset += 1;\r\n        }\r\n        offset = offset + data.decode(raw.subarray(offset));\r\n        this.Data = data.value;\r\n        return offset\r\n    },\r\n    code(){\r\n        let arr = [IEI.UserData];\r\n        let data = new DataValue(this.Data)\r\n        if (this.Fragmentation.On){\r\n            arr[0] = arr[0]|0b1000_0000;\r\n            arr.push((this.Fragmentation.FragmentType<<6)|(this.Fragmentation.Counter&0b0011_1111));\r\n        }\r\n        return arr.concat(data.code())\r\n    },\r\n    clear(){\r\n        this.Fragmentation.On = false;\r\n        this.Fragmentation.FragmentType = 0;\r\n        this.Fragmentation.Counter = 0;\r\n        this.Data = '';\r\n    }\r\n}\r\n\r\nlet Data = {\r\n    DataMessageType,\r\n    DataMessageFormat,\r\n    IndexNumber: 0,\r\n    UserId: 0,\r\n    RoomId: NaN,\r\n    UserData,\r\n}\r\n\r\nData.clear = function(){\r\n    this.DataMessageType.value = 0;\r\n    this.DataMessageFormat.value = 0;\r\n    this.IndexNumber = 0;\r\n    this.UserId = 0;\r\n    this.RoomId = NaN;\r\n    this.UserData.clear();\r\n}\r\n\r\nData.decode = function(raw){\r\n    this.DataMessageType.value = raw[0];\r\n    this.DataMessageFormat.value = raw[1];\r\n    let num = new NumericValue(0);\r\n    let offset = 2;\r\n    offset += num.decode(raw.subarray(offset));\r\n    this.IndexNumber = num.value;\r\n    let data = raw.subarray(offset);\r\n    let id = new TitleNumericValue(0);\r\n    if ((data[0]&0b0111_1111) == IEI.UserId){\r\n        offset = offset + id.decode(raw.subarray(offset));\r\n        this.UserId = id.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n    if ((data[0]&0b0111_1111) == IEI.RoomId){\r\n        offset = offset + id.decode(raw.subarray(offset));\r\n        this.RoomId = id.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n    if (raw.length == offset) {\r\n        return\r\n    }\r\n    if ((data[0]&0b0111_1111) != IEI.UserData){\r\n        return\r\n    }\r\n    this.UserData.decode(data);\r\n}\r\n\r\nData.code = function(){\r\n    let arr = [MessageDiscriminator.DataMessage];\r\n    arr.push(this.DataMessageType.value);\r\n    arr.push(this.DataMessageFormat.value);\r\n    let index = [], id = [], room = [], data = [];\r\n    let ind = new NumericValue(this.IndexNumber);\r\n    let num = new TitleNumericValue();\r\n    index = ind.code();\r\n    if (this.UserId != 0){\r\n        num.value = this.UserId;\r\n        id = num.code(IEI.UserId);\r\n    }\r\n    if (isNaN(this.RoomId) == false){\r\n        num.value = this.RoomId;\r\n        room = num.code(IEI.RoomId);\r\n    }    \r\n    data = this.UserData.code();\r\n    return new Uint8Array(arr.concat(index, id, room, data))\r\n}\r\n\r\n// Acknowledge Message\r\n\r\nconst AckMessage = {\r\n    Control: 1,\r\n    Data: 2,\r\n}\r\n\r\nlet AckMessageType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case AckMessage.Control:\r\n                return 'control';\r\n            case AckMessage.Data:\r\n                return 'data';\r\n            default: return \"unknown command\"; \r\n        }\r\n    }\r\n}\r\n\r\nconst ControlAck = {\r\n    UserUpdated: 1,\r\n}\r\n\r\nlet ControlAckType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case ControlAck.UserUpdated:\r\n                return 'user parameters updated';\r\n            default: return \"unknown command\"; \r\n        }\r\n    }\r\n}\r\n\r\nconst DataAck = {\r\n    Send: 1,\r\n    Receive: 2,\r\n    Read: 3,\r\n}\r\n\r\nlet DataAckType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case DataAck.Send:\r\n                return 'send';\r\n            case DataAck.Receive:\r\n                return 'receive';\r\n            case DataAck.Read:\r\n                return 'read';\r\n            default: return \"unknown command\"; \r\n        }\r\n    }\r\n}\r\n\r\nlet Acknowledge = {\r\n    AckMessageType,\r\n    ControlAckType,\r\n    DataAckType,\r\n    IndexNumber: 0,\r\n    UserId: 0,\r\n    RoomId: NaN,\r\n}\r\n\r\nAcknowledge.clear = function(){\r\n    this.AckMessageType.value = 0;\r\n    this.ControlAckType.value = 0;\r\n    this.DataAckType.value = 0;\r\n    this.IndexNumber = 0;\r\n    this.UserId = 0;\r\n    this.RoomId = NaN;\r\n}\r\n\r\nAcknowledge.decode = function(raw){\r\n    if (raw.length < 2){\r\n        console.log('error decode ack message. Message too short');\r\n        return\r\n    }\r\n    this.AckMessageType.value = raw[0];\r\n    if (this.AckMessageType.value == AckMessage.Control){\r\n        this.ControlAckType.value = raw[1];\r\n        return\r\n    }\r\n    if (this.AckMessageType.value != AckMessage.Data){\r\n        console.log('error decode ack message. Incorrect message type');\r\n        return\r\n    }\r\n    this.DataAckType.value = raw[1]\r\n    let index = new NumericValue(0);\r\n    let offset = 2;\r\n    offset += index.decode(raw.subarray(offset));\r\n    this.IndexNumber = index.value;\r\n    let data = raw.subarray(offset);\r\n    let num = new TitleNumericValue(0);\r\n    if ((data[0]&0b0111_1111) == IEI.UserId){\r\n        offset = offset + num.decode(raw.subarray(offset));\r\n        this.UserId = num.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n    if ((data[0]&0b0111_1111) == IEI.RoomId){\r\n        offset = offset + num.decode(raw.subarray(offset));\r\n        this.RoomId = num.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n}\r\n\r\nAcknowledge.code = function(){\r\n    let arr = [MessageDiscriminator.AckMessage];\r\n    arr.push(this.AckMessageType.value);\r\n    if (this.AckMessageType.value == AckMessage.Control){\r\n        arr.push(this.ControlAckType.value);\r\n        return new Uint8Array(arr)\r\n    }\r\n    if (this.AckMessageType.value == AckMessage.Data){\r\n        arr.push(this.DataAckType.value);\r\n        let index = [], id = [], room = [];\r\n        let ind = new NumericValue(this.IndexNumber);\r\n        let num = new TitleNumericValue(0);\r\n        index = ind.code();\r\n        if (this.UserId != 0){\r\n            num.value = this.UserId;\r\n            id = num.code(IEI.UserId);\r\n        }\r\n        if (isNaN(this.RoomId) == false){\r\n            num.value = this.RoomId;\r\n            room = num.code(IEI.RoomId);\r\n        }\r\n        return new Uint8Array(arr.concat(index, id, room))\r\n    }\r\n}\r\n\r\n//Error Message\r\n\r\nconst ErrMessage = {\r\n    Control: 1,\r\n    Data: 2,\r\n}\r\n\r\nlet ErrMessageType = {\r\n    value: 0,\r\n    toString(){\r\n        switch (this.value){\r\n            case ErrMessage.Control:\r\n                return 'control';\r\n            case ErrMessage.Data:\r\n                return 'data';\r\n            default: return \"unknown error type\"; \r\n        }\r\n    }\r\n}\r\nlet Error = {\r\n    ErrMessageType,\r\n    ControlMessageType,\r\n    IndexNumber: 0,\r\n    UserId: 0,\r\n    RoomId: NaN,\r\n}\r\n\r\nError.clear = function(){\r\n    this.ErrMessageType.value = 0;\r\n    this.ControlMessageType.value = 0;\r\n    this.IndexNumber = 0;\r\n    this.UserId = 0;\r\n    this.RoomId = NaN;\r\n}\r\n\r\nError.decode = function(raw){\r\n    if (raw.length < 2) {\r\n        console.log('error decode err message. Message too short');\r\n        return\r\n    }\r\n    this.ErrMessageType.value = raw[0];\r\n    if (this.ErrMessageType.value == ErrMessage.Control){\r\n        this.ControlMessageType.value = raw[1];\r\n        return\r\n    }\r\n    if (this.ErrMessageType.value != ErrMessage.Data){\r\n        console.log('error decode err message. Incorrect message type');\r\n        return\r\n    }\r\n    let index = new NumericValue(0);\r\n    let offset = 1;\r\n    offset += index.decode(raw.subarray(offset));\r\n    this.IndexNumber = index.value;\r\n    let data = raw.subarray(offset);\r\n    let num = new TitleNumericValue(0);\r\n    if ((data[0]&0b0111_1111) == IEI.UserId){\r\n        offset = offset + num.decode(raw.subarray(offset));\r\n        this.UserId = num.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n    if ((data[0]&0b0111_1111) == IEI.RoomId){\r\n        offset = offset + num.decode(raw.subarray(offset));\r\n        this.RoomId = num.value;\r\n        data = raw.subarray(offset);\r\n    }\r\n}\r\n\r\nError.code = function(){\r\n    let arr = [MessageDiscriminator.Error];\r\n    arr.push(this.ErrMessageType.value);\r\n    if (this.ErrMessageType.value == ErrMessage.Control){\r\n        arr.push(this.ControlMessageType.value);\r\n        return new Uint8Array(arr)\r\n    }\r\n    if (this.ErrMessageType.value == ErrMessage.Data){\r\n        let index = [], id = [];\r\n        let ind = new NumericValue(this.IndexNumber);\r\n        let num = new TitleNumericValue(0);\r\n        index = ind.code();\r\n        if (this.UserId != 0){\r\n            num.value = this.UserId;\r\n            id = num.code(IEI.UserId);\r\n        } else if (isNaN(this.RoomId) == false){\r\n            num.value = this.RoomId;\r\n            id = num.code(IEI.RoomId);\r\n        }\r\n        return new Uint8Array(arr.concat(index, id))\r\n    }\r\n}\r\n\r\nconst IEI = {\r\n    UserId: 1,\r\n    RoomId: 2,\r\n    Name: 3,\r\n    Surname: 4,\r\n    Familyname: 5,\r\n    Birthdate: 6,\r\n    UserName: 7,\r\n    ListElements: 8,\r\n    NumberOfItems: 9,\r\n    LastMessageNumber: 10,\r\n    UserData: 11,\r\n}\r\n\r\nconst Fragment = {\r\n    first: 2,\r\n    middle: 0,\r\n    last: 1,\r\n}\r\n\r\nfunction FragmentTypeToString(val){\r\n    switch (val){\r\n        case Fragment.first:\r\n            return 'first fragment'\r\n        case Fragment.middle:\r\n            return 'middle fragment'\r\n        case Fragment.last:\r\n            return 'last fragment'\r\n        default:\r\n            return 'unknown fragment type'        \r\n    }\r\n}\r\n\r\n\r\nclass NumericValue {\r\n    constructor(val) {\r\n        this.value = val;\r\n    }\r\n\r\n    decode(raw){\r\n        if (raw == undefined || raw.length == 0){\r\n            console.error('error, number decode');\r\n            return 0\r\n        }\r\n        let len = 0;\r\n        if (raw[0]>>7 == 0){\r\n            this.value = raw[0];\r\n        } else {\r\n            len = raw[0] & 0b0111_1111;\r\n            if (len+1 > raw.length || len > 4){\r\n                console.error('error, number decode');\r\n                return raw.length\r\n            }\r\n            let id = new Uint8Array(4);\r\n            for (let i=0; i<len; i++){\r\n                id[3-i] = raw[len-i];\r\n              }\r\n            let idView = new DataView(id.buffer);\r\n            this.value = idView.getUint32();\r\n        }\r\n        return len + 1\r\n    }\r\n\r\n    code(){\r\n        let arr = [];\r\n        let n = this.value;\r\n        if (n < 128) {\r\n            arr.push(n);\r\n        } else {\r\n            arr.unshift(n & 255);\r\n            while (n >= 256){\r\n              n = n >>> 8;\r\n              arr.unshift(n & 255);\r\n            }\r\n            arr.unshift(arr.length|0b1000_0000);\r\n        }\r\n        return arr \r\n    }\r\n}\r\n\r\nclass TitleNumericValue{\r\n    constructor(val){\r\n        this.value = val;\r\n    }\r\n\r\n    decode(raw){\r\n      if (raw == undefined || raw.length == 0){\r\n        console.error('error, number decode');\r\n        return 0\r\n      }  \r\n      let len = 1;\r\n      let offset = 1;\r\n      if (raw[0]>>7 == 1 ){\r\n        len = raw[1];\r\n        offset = 2;\r\n      }\r\n      if (len > raw.length || len > 4){\r\n        console.error('error, number decode');\r\n        return raw.length\r\n      }\r\n      let id = new Uint8Array(4);\r\n      for (let i=0; i<len; i++){\r\n        id[3-i] = raw[offset - 1 + len-i];\r\n      }\r\n      let idView = new DataView(id.buffer);\r\n      this.value = idView.getUint32();\r\n      return len + offset\r\n    }\r\n\r\n    code(title){\r\n      let arr = [];\r\n      let n = this.value;\r\n      arr.unshift(n & 255);\r\n      while (n >= 256){\r\n        n = n >>> 8;\r\n        arr.unshift(n & 255);\r\n      }\r\n      if (arr.length > 1){\r\n        arr.unshift(arr.length);\r\n        arr.unshift(title|0b1000_0000)\r\n      } else {\r\n        arr.unshift(title)\r\n      }\r\n      return arr \r\n    }\r\n}\r\n\r\nclass StringValue {\r\n    constructor(val){\r\n        this.value = val;\r\n    }\r\n\r\n    decode(raw){\r\n        if (raw == undefined || raw.length == 0){\r\n            console.error('error, text data decode');\r\n            return ''\r\n          }\r\n        let text = new TextDecoder('utf-8');  \r\n        let len = 0, offset = 0;\r\n        if ((raw[0] >>> 7) == 1) { // длина 2 байта\r\n            len = (raw[0]&0b0111_1111)*256 + raw[1];\r\n            offset += 2;\r\n        } else {\r\n            len = raw[0];\r\n            offset += 1;\r\n        }\r\n        if (raw.length < len + offset){\r\n            console.error('error, text data decode');\r\n            return raw.length\r\n        }\r\n        this.value = text.decode(raw.subarray(offset, len+offset));\r\n        return len+offset\r\n    }\r\n\r\n    code(){\r\n        let res = [];\r\n        let encoder = new TextEncoder();\r\n        let arr = [... encoder.encode(this.value)];\r\n        let len = arr.length;\r\n        if (len > 32767){\r\n            console.error('error user data code. Data length increase max value')\r\n            return arr.push(0) // Вернём нулевую длину\r\n        }\r\n        // Кодируем длину\r\n        if (len <128){\r\n            res.push(len);            \r\n        } else {           \r\n            res.push(len >>> 8);\r\n            res.push(len&255);\r\n            res[0] = res[0] | 0b1000_0000;\r\n           \r\n        }\r\n        return (res.concat(arr))\r\n    }\r\n}\r\n\r\nclass DataValue {\r\n    constructor(val){\r\n        this.value = val;\r\n    }\r\n\r\n    decode(raw){\r\n        if (raw == undefined || raw.length == 0){\r\n            console.error('error, text data decode');\r\n            return 0\r\n          }\r\n        let len = 0, offset = 0;\r\n        if ((raw[0] >>> 7) == 1) { // длина 2 байта\r\n            len = (raw[0]&0b0111_1111)*256 + raw[1];\r\n            offset += 2;\r\n        } else {\r\n            len = raw[0];\r\n            offset += 1;\r\n        }\r\n        if (raw.length < len + offset){\r\n            console.error('error, text data decode');\r\n            return raw.length\r\n        }\r\n        this.value = raw.subarray(offset, len+offset);\r\n        return len+offset\r\n    }\r\n\r\n    code(){\r\n        let res = [];\r\n        let arr = [... this.value];\r\n        let len = arr.length;\r\n        if (len > 32767){\r\n            console.error('error user data code. Data length increase max value')\r\n            return arr.push(0) // Вернём нулевую длину\r\n        }\r\n        // Кодируем длину\r\n        if (len <128){\r\n            res.push(len);            \r\n        } else {           \r\n            res.push(len >>> 8);\r\n            res.push(len&255);\r\n            res[0] = res[0] | 0b1000_0000;\r\n           \r\n        }\r\n        return (res.concat(arr))\r\n    }\r\n}\r\n\r\n\r\n// assembler\r\n\r\n// message {id: Id, type: fragmentationType, number: currentNumber, data: userData}\r\n// fullmessage Uint8Array\r\n\r\nclass Assembler {\r\n    store = new Map();\r\n    maxLength = 32767;\r\n    constructor(fullMessage, message){\r\n        this.fullMessage = fullMessage;\r\n        this.message = message;\r\n    }\r\n\r\n    assembling(){\r\n        switch (this.message.type){\r\n            case FragmentationType.First:\r\n                this.startAssembling();\r\n                break;\r\n            case FragmentationType.Middle:\r\n                this.addFragment();\r\n                break;\r\n            case FragmentationType.Last:\r\n                this.completeAssembling();\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    startAssembling(){\r\n        if (this.store.has(this.message.id) == true){\r\n            this.store.delete(this.message.id);\r\n        }\r\n        let fragments = [];\r\n        let fragment = {\r\n            number: this.message.number,\r\n            data: this.message.data,\r\n        }\r\n        fragments.push(fragment);\r\n        this.store.set(this.message.id, fragments);\r\n    }\r\n\r\n    addFragment(){\r\n        if (this.store.has(this.message.id) == false){\r\n            return\r\n        }\r\n        let fragment = {\r\n            number: this.message.number,\r\n            data: this.message.data,\r\n        }\r\n        this.store.get(this.message.id).push(fragment)\r\n    }\r\n\r\n    completeAssembling(){\r\n        if (this.store.has(this.message.id) == false){\r\n            return\r\n        }\r\n        console.log(this.store.get(this.message.id).length);\r\n        let len = (this.store.get(this.message.id).length)*this.maxLength + this.message.data.length;\r\n        let result = new Uint8Array(len);\r\n        let i = 0;\r\n        for (let val of this.store.get(this.message.id)){\r\n            result.set(val.data, [i*this.maxLength]);\r\n            i++\r\n        }\r\n        result.set(this.message.data, [i*this.maxLength]);\r\n        this.fullMessage = result;\r\n    }\r\n\r\n    fragmentation(){\r\n        let result = [];\r\n        let len = 0;\r\n        for (let i = 0; i < this.fullMessage.length; i+=this.maxLength){\r\n            if ((this.fullMessage.length - i) > this.maxLength){\r\n                len = this.maxLength;\r\n            }else{\r\n                len = this.fullMessage.length - i;\r\n            }\r\n            let fragment = this.fullMessage.slice(i, i+len);\r\n            result.push(fragment);\r\n        }\r\n        return result\r\n    }\r\n\r\n    clear(){\r\n        this.message = null;\r\n        this.fullMessage = null;\r\n    }\r\n}\r\n\r\nconst assembler = new Assembler()\r\n\r\nexport const protocol = {\r\n    ControlMessage,\r\n    ControlCommand,\r\n    Data,\r\n    Acknowledge,\r\n    Error,\r\n    FragmentTypeToString,\r\n    assembler,\r\n}"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPrimitive","t","r","e","i","call","TypeError","String","Number","toPropertyKey","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","MessageDiscriminator","ControlMessage","DataMessage","AckMessage","ErrMessage","UserNameRequest","UserNameResponse","Connect","Disconnect","Registration","UserUpdate","UserInfoRequest","UserInfoResponse","UserInfoUpdate","UsersList","MessagesRequest","NumberOfMessages","ControlMessageType","toString","this","UserInfo","Name","Surname","Familyname","Birthdate","decode","raw","len","length","offset","str","StringValue","data","subarray","IEI","birthdateDecode","code","name","surmame","familyname","birthdate","res","unshift","birthdateCode","concat","clear","day","mounth","year","Uint8Array","yearView","DataView","buffer","getUint16","val","Date","parse","date","push","getDate","getMonth","Math","floor","getFullYear","ListCommand","NumberOfItems","ListElements","Map","listCommandTypeToString","num","TitleNumericValue","NumericValue","online","nrMessages","id","set","nrm","ListCommandType","setUserList","updateUserList","refreshUserList","input","RoomId","LastMessageNumber","console","error","arr","number","NumOfMessages","ControlCommand","UserId","UserName","text","DataType","NewMessage","OldMessage","UpdateMessage","DataMessageType","DataFormat","Text","Image","Audio","DataMessageFormat","FragmentationType","First","Middle","Last","UserData","Fragmentation","On","FragmentType","Counter","Data","DataValue","IndexNumber","NaN","index","room","ind","isNaN","Control","AckMessageType","ControlAck","UserUpdated","ControlAckType","DataAck","Send","Receive","Read","DataAckType","Acknowledge","log","ErrMessageType","Error","Fragment","first","middle","last","FragmentTypeToString","undefined","idView","getUint32","n","title","TextDecoder","encoder","TextEncoder","encode","Assembler","fullMessage","message","assembling","type","startAssembling","addFragment","completeAssembling","store","has","delete","fragments","fragment","get","maxLength","result","fragmentation","slice","assembler","protocol"],"sourceRoot":""}